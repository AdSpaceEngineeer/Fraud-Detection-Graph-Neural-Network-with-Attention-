import torch.nn.functional as F
from torch_geometric.nn import GCNConv

class FraudGCN(torch.nn.Module):
    def __init__(self, in_features, hidden_dim, out_features):
        super().__init__()
        self.conv1 = GCNConv(in_features, hidden_dim)
        self.conv2 = GCNConv(hidden_dim, out_features)
        self.dropout = 0.6  # dropout rate from relevant GNN papers
    def forward(self, x, edge_index):
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = F.dropout(x, p=self.dropout, training=self.training)
        x = self.conv2(x, edge_index)
        return x  # raw logits, to be used with CrossEntropyLoss

# Initialize GCN: 
input_dim=32 (features), hidden=64, output=2 classes
model_gcn = FraudGCN(in_features=32, hidden_dim=64, out_features=2)
